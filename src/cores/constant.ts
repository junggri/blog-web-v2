export const techStack = ["javascript", 'typescript', 'nodejs', 'docker', 'html5 canvas']

export const techStackMap = {
  javascript: {
    type: "javascript",
    desc:
      `
        웹 개발자가 되겠다고 마음먹은 이후 첫번째로 배운언어이며, 웹 개발자라면 디폴트로 배워야하는 언어이기도 하죠. 요즈음 자바스크립트의 위상은 타입스크립로 인해 높아지기도 하였죠.
        웹에서만 사용되던 언어였지만, 이제는 데스크탑 어플리케이션, 서버, 앱을 개발할 수 있는 언어가 된 만큼 이제는 배워두면 두고두고 여러분야에 사용할 수 있는 언어이기도 합니다.
        여러번 공부해도 완벽히 이해하기 어려운 언어라고 생각합니다. 그래서 저는 더 깊게 공부할 수 있는 기회가 있어서 이 언어를 좋아합니다. 
      `
  },
  typescript: {
    type: "typescript",
    desc: `
      자바스크립트의 위상을 드높여준 '타입스크립트', 자바스크립트 슈퍼셋인 타입스크립트 저의 러빗입니다. 동적인 자바스크립트에 타입을 추가해주면서 개발의 편의성을 높여주는 아주 매력적인 언어입니다.
      언어를 자바스크립트로 시작했기 때문에, 타입이 있는 언어를 처음 공부했던 기억이 있습니다. 사실 초반에는 공식문서 자체도 난해하고 이해하기 힘들어서 몇번은 포기했지만, 꾸준히 사용하다 보니,
      타입스크립의 장점을 서서히 느꼈습니다. 이론상 런타임에 에러가 발생할 확률을 줄여줘서 프로그램의 안정성을 높여주는 것도 대단한 장점이지만, 저에게 가장 편리했던 점은 바로 메서드 추론, 필드 추론, 자동완성이지
      않을까 싶습니다. 타입을 전달해주면 알아서 어떠한 필드 또는 메서드가 있는지 알려주니 이보다 편리할 수 있을까요?? 그리고 두번째로 index.d.ts입니다. d.ts파일로부터 특정메소드에 어떤 매개변수가 들어오는지
      공식문서를 가보지 않아도 한번쯤은 추론해 볼 수 있다는 점이 타입스크립트의 가장 큰 장점이지 않을까 싶습니다. 웹 개발자 여러분 무조건 타입스크립트를 배웁시다!!
    `
  },
  nodejs: {
    type: "nodejs",
    desc: `
      nodejs를 사용하였던 가장 단순했던 이유는, 자바스크립틑 사용했었기 떄문이라고 말할 수 있을 것 같습니다. 그래서 한국에서 가장 많이 쓰이는 java 스프링과 관련하여 무엇이 더 좋았다고
      비교하여 설명할 수는 없지만, nodejs를 사용하면서 느꼈던 점들을 작성해 보겠습니다. v8엔진을 기반으로 싱글 쓰레드 이벤트루프, 논블로킹 I/O, 비동기에 최적화되았다고 공부했었습니다
      솔직히 비교대상이 없기에 노드만의 고유한 특성의 장점을 설명드리기 어렵지만! 적어도 자바스크립트만으로 서버코드를 작성하여 웹을 만들 수 있다는 점이 저에겐 가장 큰 메리트 였습니다.
      가장먼저 배우게 된 것이 Express js였고 현재는 Nest js를 사용하고 있습니다. 자유도가 굉장히 높은 Express를 사용하고 Nest를 사용해보니 얼른 자바 스프링을 공부해보고 싶은 생각도 들었습니다.
    `
  },
  docker: {
    type: "docker",
    desc: `
      개발한 코드를 어떻게 배포할 것인가에 대한 고민을 하다보면 자연스레 접하게 되는 것이 바로 도커, 쿠버네티즈라고 생각합니다. 하지만 쿠버네티즈는 개인이 운영하는 작은 블로그에는 적용하기에 비용도 부담되었습니다. 물론 빌드한 이미지를 기반으로
      서버를 더 증설스켜주거나 감소시켜주는 편리함은 당연 최고라고 생각합니다. 저는 도커만을 사용하여 제 코드를 이미지화 시키고 컨테이너를 띄움으로써 블로그를 운영중입니다. 
      저의 경우 nodejs를 사용하여 작성한 서버를 이미지화 시킨 후 ECR에 저장시킨 후 shell script를 작성하여 ec2에서 스크립트를 실행하여 변경된 이미지를 다시 띄어줍니다.
      도커를 사용하면 작성한 코드를 배포하기 이전에 오류를 많이 만날 수 있지만, 그 과정을 지나치면 그 편리함은 잊을 수 없는 것 같습니다.
    `
  },
  "html5 canvas": {
    type: 'htm5 canvas',
    desc: `
      제가 캔버스를 사용해보았던 이유는 재밋어보여서라고 말하는게 정답이라고 생각합니다. html,css만으로 할 수 없는 효과들을 캔버스코드를 사용하여 그리게 되다보면 노가다라는 생각이 강하지만!!
      하나하나 그려가는 과정은 레고를 쌓는 느낌이였습니다. 캔버스를 공부하면서 느낀점은 항상 최적화가 가장 중요한 것 같습니다. requestAnimationFrame으로 초당 60번을 그려주다보니(이상적)
      화면에 보이지 않을때 위 함수를 실행 시킨다는 건...최악이라고 느낀점이 있기에 저는 requestAnimationFrame을 최적화를 잘하여 사용한다면 또 캔버스를 능수능란하게 사용한다면,
      한단계 래벨업하는 개발자가 될 거라고 생각합니다.
    `
  }
}

export const linkData = {
  github: {type: "github", href: "https://github.com/junggri"},
  blog: {type: "blog", href: "https://www.junggri.com"},
  youtube: {type: "youtube", href: "https://www.youtube.com/channel/UCYMk5JNU9mzsaP-ZhhgXpgg/playlists"},
}

export const developHistory = {
  coscuz: {type: "coscuz", desc: "coscuz는 제가 개발을 시작한 이유이며, 웹이라는 방대한 생태계를 알지 못하고 있을때 겁없이 도전했던 MPA웹입니다."},
  blogV1: {type: "blog_v1", desc: "정그리 블로그의 v1의 대한 개발 히스토리이며, 리액트와 nodejs 그리고 docker를 이용한 저의 첫번 째 보물입니다."},
  blogV2: {type: "blog_v2", desc: "현재 블로그의 대한 히스토리이며, NEXT js와 nodejs 그리고 docker를 이용한 두번 째 웹 애플리케이션입니다."},
  now: {type: "date-app", desc: "리액트 네이티브를 처음사용하면서 개발을 진행하고 있는 히스토리입니다."}

}
